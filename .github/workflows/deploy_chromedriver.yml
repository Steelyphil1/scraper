name: Deploy Chromedriver

on: # On push to master, if chromedriver has been changed
  push:
    branches:
      - master
    paths:
      - 'chromedriver'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create ZIP file
        run: |
          # Create a ZIP file containing chromedriver
          zip -qq chromedriver.zip chromedriver

          if [ -e "./chromedriver.zip" ]; then
            echo "File 'chromedriver.zip' exists."
          else
            echo "File 'chromedriver.zip' not found."
            exit 1
          fi

      - name: Debug Environment and AWS
        run: |
          ls -al
          pwd
          aws --version
          aws s3 ls s3://camp-lite-dev/chromedriver/
          aws lambda list-layers

      - name: Package Lambda Layer
        run: |
          # Copy the file to S3
          aws s3 cp ./chromedriver.zip s3://camp-lite-dev/chromedriver/chromedriver.zip

          #  Install it in Lambda Layer
          aws lambda publish-layer-version --layer-name chromedriver --content S3Bucket=camp-lite-dev,S3Key=chromedriver/chromedriver.zip --compatible-runtimes nodejs20.x --compatible-architectures arm64

      - name: Debug AWS After
        run: |
          aws s3 ls s3://camp-lite-dev/chromedriver/
          aws lambda list-layers

      # - name: Get Latest Lambda Layer Version
      #   id: get_layer_version
      #   run: |
      #     # Retrieve the new lambda layer arn and assign it to an output variable
      #     latest_version=$(aws lambda list-layer-versions --layer-name chromedriver --query 'LayerVersions[0].LayerVersionArn' --output text)
      #     echo "Latest Layer Version ARN: $latest_version"
      #     echo "::set-output name=layer_version_arn::$latest_version"

      - name: Get Existing Lambda Layers
        id: get_existing_layers
        run: |
          existing_layers=$(aws lambda get-function-configuration --function-name camping-test --query 'Layers[*].Arn' --output text)
          echo "::set-output name=existing_layers::$existing_layers"

      - name: Update Lambda Function
        run: |
          # Using the output variable from our get step, update the lambda function to use the new layer
          existing_layers=${{ steps.get_existing_layers.outputs.existing_layers }}
          aws lambda update-function-configuration --function-name camping-test --layers $existing_layers